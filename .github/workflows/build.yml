name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint-and-format:
    name: Lint with clippy and check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy check
        run: cargo clippy -p smithe_backend -p smithe_database -p smithe_lib -p startgg -- -D warnings
  build:
    needs: lint-and-format
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - if: matrix.os == 'windows-latest'
      name: Cache Chocolatey packages
      uses: actions/cache@v2
      with:
        path: C:\ProgramData\chocolatey\lib
        key: windows-choco-${{ hashFiles('**/choco-packages.config') }}
        restore-keys: |
          windows-choco-      

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ matrix.target }}

    - if: matrix.os == 'windows-latest'
      name: Install PostgreSQL
      run: choco install postgresql --params '/Password:postgres' --no-progress        

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-binary-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/my-binary
